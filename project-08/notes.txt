Project 08 - Accordion Component
==============================

Code Explanation
---------------

1. AccordionItem.js:
   - Uses useRef to measure content height dynamically
   - Implements height-based animation instead of max-height
   - Uses aria-expanded and aria-hidden for accessibility
   - Toggles between '+' and '−' icons for visual feedback
   - Manages content height through state and refs

2. Accordion.js:
   - Manages open/closed state for multiple items
   - Supports both single and multiple open modes
   - Uses array state to track open items
   - Implements toggle logic with array manipulation
   - Passes necessary props to AccordionItem

3. App.js:
   - Provides sample FAQ data structure
   - Configures accordion with allowMultiple prop
   - Implements clean layout with max-width container
   - Uses semantic HTML structure

Implementation Details
--------------------

1. Height Animation:
   - Uses ref to measure actual content height
   - Applies height transition for smooth animation
   - Updates height on open/close state change
   - Handles dynamic content height changes

2. State Management:
   - Tracks open items in parent component
   - Uses array state for multiple items
   - Implements toggle logic with array methods
   - Manages single/multiple open modes

3. Accessibility:
   - Uses semantic button element
   - Implements aria-expanded attribute
   - Uses aria-hidden for content
   - Provides visual focus indicators

4. Styling:
   - Clean, modern design
   - Smooth transitions
   - Proper spacing and typography
   - Visual feedback on interaction
   - Responsive layout

Component Structure
-----------------

1. AccordionItem:
   ```jsx
   <div className="accordion-item">
     <button className="accordion-header">
       <span className="accordion-title">{title}</span>
       <span className="accordion-icon">{isOpen ? '−' : '+'}</span>
     </button>
     <div className="accordion-content">
       <div className="accordion-body">{content}</div>
     </div>
   </div>
   ```

2. Accordion:
   ```jsx
   <div className="accordion">
     {items.map((item, index) => (
       <AccordionItem
         key={index}
         title={item.title}
         content={item.content}
         isOpen={openItems.includes(index)}
         onClick={() => toggleItem(index)}
       />
     ))}
   </div>
   ```

CSS Structure
------------

1. Layout:
   - Max-width container
   - Proper spacing and padding
   - Clean typography
   - Responsive design

2. Animations:
   - Height transition for content
   - Transform for icon rotation
   - Smooth hover effects
   - Focus state transitions

3. States:
   - Hover state with background change
   - Focus state with outline
   - Active state for open items
   - Disabled state handling

Best Practices
-------------

1. Performance:
   - Uses CSS transitions for animations
   - Implements proper cleanup
   - Optimizes re-renders
   - Handles dynamic content

2. Accessibility:
   - Semantic HTML structure
   - ARIA attributes
   - Keyboard navigation
   - Focus management

3. Code Organization:
   - Clean component structure
   - Proper prop passing
   - Reusable components
   - Clear naming conventions

4. User Experience:
   - Smooth animations
   - Clear visual feedback
   - Consistent spacing
   - Responsive design

Key Features
-----------

1. Functionality:
   - Single/multiple open modes
   - Smooth height animation
   - Dynamic content handling
   - Click-to-toggle

2. User Interface:
   - Clean, modern design
   - Visual feedback
   - Proper spacing
   - Icon transitions

3. Accessibility:
   - Screen reader support
   - Keyboard navigation
   - ARIA attributes
   - Focus management

4. Performance:
   - Optimized animations
   - Efficient state updates
   - Clean component structure
   - Proper cleanup

Learning Points
--------------

1. React Concepts:
   - useRef for DOM measurement
   - State management with arrays
   - Controlled components
   - Component composition

2. CSS Features:
   - Height transitions
   - Transform animations
   - Flexbox layout
   - Responsive design

3. JavaScript:
   - Array manipulation
   - Event handling
   - DOM measurement
   - State updates

4. Best Practices:
   - Component design
   - State management
   - Accessibility
   - Performance 