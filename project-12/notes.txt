# Project 12 - Weather Dashboard
A React application that demonstrates multiple API calls, data transformation, and dynamic UI updates by creating a weather dashboard.

## Code Walkthrough

### 1. App.js - Main Component
```javascript
// State Management using useState Hook
const [weather, setWeather] = useState(null);    // Current weather data
const [forecast, setForecast] = useState(null);  // 5-day forecast data
const [loading, setLoading] = useState(false);   // Loading state
const [error, setError] = useState(null);        // Error handling
const [location, setLocation] = useState('');    // User input location

// Weather API Call
const fetchWeather = async (city) => {
  setLoading(true);
  setError(null);
  
  try {
    // Current weather API call
    const weatherResponse = await fetch(
      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`
    );
    
    // Forecast API call
    const forecastResponse = await fetch(
      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}`
    );

    if (!weatherResponse.ok || !forecastResponse.ok) {
      throw new Error('City not found');
    }

    const weatherData = await weatherResponse.json();
    const forecastData = await forecastResponse.json();

    // Transform and store data
    setWeather(transformWeatherData(weatherData));
    setForecast(transformForecastData(forecastData));
  } catch (err) {
    setError(err.message);
    setWeather(null);
    setForecast(null);
  } finally {
    setLoading(false);
  }
};
```
Key Learning Points:
- Multiple API calls in parallel
- Data transformation
- Error handling for multiple requests
- Loading state management
- State updates with transformed data

### 2. SearchForm.js - Location Input Component
```javascript
// Controlled Input with useState
const [city, setCity] = useState('');

// Form Submission Handler
const handleSubmit = (e) => {
  e.preventDefault();
  
  if (city.trim()) {
    onSearch(city.trim());
    setCity(''); // Clear input after search
  }
};

// Input Change Handler with Debounce
const handleChange = debounce((value) => {
  setCity(value);
}, 300);
```
Key Learning Points:
- Form handling
- Input validation
- Debouncing for performance
- Props for component communication
- Event handling optimization

### 3. WeatherCard.js - Current Weather Display
```javascript
// Props Destructuring
const { weather } = props;

// Weather Icon Selection
const getWeatherIcon = (code) => {
  // Map weather codes to icon components
  const iconMap = {
    '01d': <SunIcon />,
    '01n': <MoonIcon />,
    // ... more weather codes
  };
  return iconMap[code] || <DefaultIcon />;
};

// Temperature Display
const formatTemp = (temp) => {
  return `${Math.round(temp)}°C`;
};
```
Key Learning Points:
- Component composition
- Dynamic icon rendering
- Data formatting
- Conditional rendering
- Props validation

### 4. ForecastList.js - 5-Day Forecast
```javascript
// Forecast Data Processing
const processForecast = (forecastData) => {
  // Group forecast by day
  const dailyForecast = forecastData.list.reduce((acc, item) => {
    const date = new Date(item.dt * 1000).toLocaleDateString();
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(item);
    return acc;
  }, {});

  // Calculate daily averages
  return Object.entries(dailyForecast).map(([date, items]) => ({
    date,
    temp: average(items.map(item => item.main.temp)),
    icon: items[0].weather[0].icon,
    description: items[0].weather[0].description
  }));
};
```
Key Learning Points:
- Data transformation
- Array methods
- Date handling
- Object manipulation
- Performance optimization

## Core Concepts Explained

### 1. Multiple API Integration
The application uses OpenWeatherMap API:
- Current Weather API
  - Endpoint: `/weather`
  - Parameters: city, units, API key
  - Response: Current weather data

- Forecast API
  - Endpoint: `/forecast`
  - Parameters: city, units, API key
  - Response: 5-day forecast data

Example API Response Structure:
```javascript
// Current Weather
{
  main: {
    temp: 20.5,
    humidity: 65,
    pressure: 1012
  },
  weather: [{
    main: "Clear",
    description: "clear sky",
    icon: "01d"
  }],
  wind: {
    speed: 5.2,
    deg: 180
  }
}

// Forecast
{
  list: [
    {
      dt: 1625097600,
      main: { temp: 22.3 },
      weather: [{ icon: "01d" }]
    },
    // ... more forecast items
  ]
}
```

### 2. Data Transformation
1. Current Weather:
   - Temperature conversion
   - Wind speed formatting
   - Weather icon mapping
   - Time zone handling

2. Forecast Data:
   - Daily grouping
   - Average calculations
   - Icon selection
   - Date formatting

### 3. Error Handling
1. API Errors:
   - Network failures
   - Invalid responses
   - Rate limiting
   - City not found

2. Data Validation:
   - Missing fields
   - Invalid formats
   - Null checks
   - Type checking

3. User Feedback:
   - Error messages
   - Loading states
   - Retry options
   - Fallback UI

## Implementation Steps

1. Project Setup
   ```bash
   npx create-react-app project-12
   cd project-12
   npm install axios moment
   ```

2. Component Structure
   ```
   src/
   ├── components/
   │   ├── SearchForm.js
   │   ├── WeatherCard.js
   │   ├── ForecastList.js
   │   └── WeatherIcon.js
   ├── utils/
   │   ├── api.js
   │   └── transformers.js
   ├── App.js
   ├── App.css
   └── index.js
   ```

3. API Integration
   - Set up API configuration
   - Implement API calls
   - Add error handling
   - Handle rate limiting

4. Component Development
   - Create reusable components
   - Implement data transformation
   - Add loading states
   - Ensure error handling

5. Styling
   - Implement responsive design
   - Add weather icons
   - Style loading states
   - Ensure mobile compatibility

## Best Practices Demonstrated

1. Code Organization
   - Separate API logic
   - Component reusability
   - Utility functions
   - Clean code structure

2. Error Handling
   - Try-catch blocks
   - Error boundaries
   - User feedback
   - Graceful fallbacks

3. Performance
   - Debounced search
   - Memoized components
   - Optimized renders
   - Data caching

4. Accessibility
   - Semantic HTML
   - ARIA attributes
   - Keyboard navigation
   - Screen reader support

## Common Pitfalls to Avoid

1. API Integration
   - Not handling rate limits
   - Missing error cases
   - No loading states
   - Poor error messages

2. Data Transformation
   - Inefficient processing
   - Memory leaks
   - Type errors
   - Null reference errors

3. User Experience
   - No loading indicators
   - Poor error feedback
   - Unresponsive UI
   - Missing validation

## Testing Tips

1. API Testing
   - Test successful responses
   - Test error cases
   - Test loading states
   - Test rate limiting

2. Component Testing
   - Test data transformation
   - Test error handling
   - Test loading states
   - Test user interactions

3. Integration Testing
   - Test API integration
   - Test data flow
   - Test error propagation
   - Test state updates 