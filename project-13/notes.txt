Project 13: Multi-Page Blog with Router

This project demonstrates the implementation of a multi-page blog using React Router, focusing on the key concepts specified in the README.md:

1. React Router Implementation
   ```jsx
   // App.js
   <Router>
     <div className="app">
       <Navbar />
       <main className="main-content">
         <Switch>
           <Route exact path="/" component={Home} />
           <Route path="/about" component={About} />
           <Route exact path="/posts" component={Posts} />
           <Route path="/posts/:id" component={PostDetail} />
         </Switch>
       </main>
     </div>
   </Router>
   ```
   - BrowserRouter for client-side routing
   - Route components for each page
   - Switch for exclusive route matching
   - Exact prop for precise path matching

2. Route Parameters
   ```jsx
   // PostDetail.js
   class PostDetail extends Component {
     constructor(props) {
       super(props);
       this.state = {
         post: {
           id: parseInt(this.props.match.params.id),
           // ... other post data
         }
       };
     }
   }
   ```
   - URL parameters accessed via this.props.match.params
   - Dynamic routing for individual posts
   - Parameter validation and type conversion

3. Nested Routes
   ```jsx
   // Posts.js
   <div className="posts">
     <h1>All Posts</h1>
     <div className="posts-list">
       {posts.map(post => (
         <article key={post.id}>
           <Link to={`/posts/${post.id}`}>
             {/* Post content */}
           </Link>
         </article>
       ))}
     </div>
   </div>
   ```
   - Parent-child route relationships
   - Nested component structure
   - Shared layouts

4. Navigation
   ```jsx
   // Navbar.js
   class Navbar extends Component {
     render() {
       return (
         <nav className="navbar">
           <div className="nav-center">
             <Link to="/" className="logo">Blog</Link>
             <ul className="nav-links">
               <li><Link to="/">Home</Link></li>
               <li><Link to="/about">About</Link></li>
               <li><Link to="/posts">Posts</Link></li>
             </ul>
           </div>
         </nav>
       );
     }
   }
   ```
   - Link components for navigation
   - Active link handling
   - Responsive navigation menu
   - Back navigation in post details

5. Route Guards (Implementation Example)
   ```jsx
   // Example of how to implement route guards
   class PrivateRoute extends Component {
     render() {
       const { component: Component, ...rest } = this.props;
       return (
         <Route
           {...rest}
           render={props =>
             this.state.isAuthenticated ? (
               <Component {...props} />
             ) : (
               <Redirect to="/login" />
             )
           }
         />
       );
     }
   }
   ```
   - Authentication checks
   - Protected routes
   - Redirect handling
   - Access control

6. Component Structure
   - Class-based components for state management
   - Constructor for state initialization
   - Render method for UI
   - Props and state handling

7. State Management
   ```jsx
   // Home.js
   class Home extends Component {
     constructor(props) {
       super(props);
       this.state = {
         featuredPosts: [
           // Post data
         ]
       };
     }
   }
   ```
   - Local component state
   - State updates with setState
   - Props for component communication

8. Styling and Layout
   ```css
   /* App.css */
   .main-content {
     flex: 1;
     padding: 2rem;
     max-width: 1200px;
     margin: 0 auto;
   }
   ```
   - Responsive design
   - Mobile-first approach
   - Consistent spacing
   - Modern UI components

9. Best Practices
   - Component organization
   - Route configuration
   - Error handling
   - Loading states
   - Accessibility
   - Code splitting (can be implemented)

10. Learning Points
    - React Router setup and configuration
    - Route parameters and navigation
    - Component composition
    - State management in class components
    - Responsive design
    - Error boundaries

This implementation follows the README.md specifications by focusing on:
- React Router implementation
- Route parameters for dynamic content
- Nested routes for complex layouts
- Navigation between pages
- Route guards for protected content
- Class-based component structure
- Clean and maintainable code organization

This project serves as a foundation for building complex React applications using class components and React Router. It demonstrates best practices in React development and provides a solid understanding of class-based components and client-side routing. 