Project 04: Simple To-Do List
===========================

CODE EXPLANATION
---------------

1. App.js (Main Component)
   ```javascript
   // State Management
   const [todos, setTodos] = useState([]);
   ```
   - Uses useState hook to manage todos array
   - Initial state is empty array []
   - setTodos function updates the state

   ```javascript
   // Adding a new todo
   const addTodo = (text) => {
     const newTodo = {
       id: Date.now(),  // Unique ID using timestamp
       text,           // Todo text from input
       completed: false // Initial completion status
     };
     setTodos([...todos, newTodo]); // Spread operator to maintain immutability
   };
   ```

   ```javascript
   // Toggling todo completion
   const toggleComplete = (id) => {
     setTodos(
       todos.map(todo =>
         todo.id === id ? { ...todo, completed: !todo.completed } : todo
       )
     );
   };
   ```
   - Uses map to create new array
   - Spreads existing todo properties
   - Toggles completed status
   - Returns unchanged todos for non-matching IDs

   ```javascript
   // Removing a todo
   const removeTodo = (id) => {
     setTodos(todos.filter(todo => todo.id !== id));
   };
   ```
   - Uses filter to create new array
   - Keeps todos that don't match the ID
   - Removes the todo with matching ID

2. TodoForm.js (Input Component)
   ```javascript
   // Local state for input
   const [value, setValue] = useState('');
   ```
   - Manages input field value
   - Resets after submission

   ```javascript
   // Form submission handler
   const handleSubmit = (e) => {
     e.preventDefault();
     if (!value.trim()) return;
     addTodo(value);
     setValue('');
   };
   ```
   - Prevents default form submission
   - Validates non-empty input
   - Calls parent's addTodo function
   - Clears input after submission

3. Todo.js (Individual Todo Component)
   ```javascript
   function Todo({ todo, toggleComplete, removeTodo }) {
     return (
       <div className="todo-item">
         <div 
           className={`todo-text ${todo.completed ? 'completed' : ''}`}
           onClick={() => toggleComplete(todo.id)}
         >
           {todo.text}
         </div>
         <button onClick={() => removeTodo(todo.id)}>
           Delete
         </button>
       </div>
     );
   }
   ```
   - Receives todo object and functions as props
   - Conditional className for completed state
   - Click handlers for completion and deletion

CONCEPT BREAKDOWN
----------------

1. Component Structure
   - App.js (Parent)
     * Manages todo state
     * Contains CRUD operations
     * Renders child components
     * Passes data and functions as props

   - TodoForm.js (Child)
     * Handles user input
     * Manages form submission
     * Communicates with parent via props
     * Maintains its own input state

   - Todo.js (Child)
     * Displays individual todo
     * Handles completion toggle
     * Handles deletion
     * Receives data and functions via props

2. State Management
   - Parent State (App.js)
     * todos array containing all todos
     * Each todo has: id, text, completed
     * State updates trigger re-renders
     * State is passed down to children

   - Child State (TodoForm.js)
     * Local input value state
     * Independent of parent state
     * Cleared after submission

3. Props and Data Flow
   - Downward Flow
     * Parent to children via props
     * Data and functions passed down
     * Children receive and use props

   - Upward Flow
     * Children to parent via callbacks
     * Parent functions passed as props
     * Children call these functions

4. Event Handling
   - Form Events
     * onSubmit for new todos
     * onChange for input updates
     * Validation before submission

   - Click Events
     * onClick for completion toggle
     * onClick for deletion
     * Event handlers in child components

5. Styling Approach
   - CSS Classes
     * Component-specific styles
     * Conditional classes
     * Responsive design
     * Interactive states

   - Layout Structure
     * Flexbox for alignment
     * Grid for organization
     * Responsive containers
     * Mobile-friendly design

IMPLEMENTATION STEPS
-------------------
1. Setup
   - Create React project
   - Set up component structure
   - Add basic styling

2. State Management
   - Implement useState for todos
   - Create CRUD functions
   - Handle state updates

3. Component Creation
   - Build TodoForm component
   - Build Todo component
   - Connect components

4. Styling
   - Add CSS classes
   - Implement responsive design
   - Add interactive states

5. Testing
   - Test CRUD operations
   - Verify state updates
   - Check responsive design

BEST PRACTICES
-------------
1. Code Organization
   - Separate components
   - Clear file structure
   - Consistent naming

2. State Management
   - Immutable updates
   - Single source of truth
   - Proper state lifting

3. Component Design
   - Reusable components
   - Clear props interface
   - Proper event handling

4. Performance
   - Efficient re-renders
   - Proper key usage
   - Optimized state updates

5. User Experience
   - Clear feedback
   - Intuitive interface
   - Responsive design

Key Features:
------------
1. Todo Management
   - Add new todos
   - Mark todos as complete/incomplete
   - Delete todos
   - Empty state handling

2. Component Architecture
   - App (Parent component)
   - TodoForm (Input component)
   - Todo (Individual todo component)
   - Component communication

3. User Interface
   - Clean, modern design
   - Responsive layout
   - Interactive elements
   - Visual feedback

Getting Started:
--------------
1. Navigate to project directory:
   cd project-04

2. Install dependencies:
   npm install

3. Start development server:
   npm start

4. Open http://localhost:3000 to view the app

Learning Points:
--------------
1. Props and State
   - Passing props between components
   - Managing state in parent component
   - State updates and immutability
   - Component re-rendering

2. Component Communication
   - Parent-child communication
   - Event handling
   - State lifting
   - Props drilling

3. React Best Practices
   - Component organization
   - State management
   - Event handling
   - CSS styling
   - Code structure 