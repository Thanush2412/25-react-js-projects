Project 14: Shopping Cart - Implementation Guide

1. Code Walkthrough
-------------------

A. App.js
---------
```jsx
function App() {
  return (
    <CartProvider>
      <main>
        <Navbar />
        <div className="container">
          <ProductList />
          <Cart />
        </div>
      </main>
    </CartProvider>
  );
}
```
Key Learning Points:
- CartProvider wraps the entire app to provide cart state
- Container uses CSS Grid for layout
- Components are organized for clear separation of concerns

B. CartContext.js
----------------
```jsx
const initialState = {
  items: [],
  total: 0,
  amount: 0
};

const cartReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_ITEM':
      // Add or update item logic
    case 'REMOVE_ITEM':
      // Remove or decrease item logic
    case 'CLEAR_CART':
      return initialState;
  }
};
```
Key Learning Points:
- useReducer for complex state management
- Immutable state updates
- Action-based state changes
- Context API for global state

C. ProductList.js
----------------
```jsx
const ProductList = () => {
  const { addToCart } = useContext(CartContext);
  return (
    <div className="product-list">
      {products.map(product => (
        <div className="product-card">
          <img src={product.image} alt={product.title} />
          <h3>{product.title}</h3>
          <p className="price">${product.price}</p>
          <button onClick={() => addToCart(product)}>
            Add to Cart
          </button>
        </div>
      ))}
    </div>
  );
};
```
Key Learning Points:
- useContext hook for accessing context
- Mapping over data to create UI
- Event handling with context functions
- Component composition

D. Cart.js
----------
```jsx
const Cart = () => {
  const { items, total, removeFromCart, clearCart } = useContext(CartContext);
  
  if (items.length === 0) {
    return <p>Your cart is empty</p>;
  }

  return (
    <div className="cart">
      {items.map(item => (
        <div className="cart-item">
          <img src={item.image} alt={item.title} />
          <div className="item-details">
            <h3>{item.title}</h3>
            <p>Quantity: {item.amount}</p>
            <button onClick={() => removeFromCart(item.id)}>
              Remove
            </button>
          </div>
        </div>
      ))}
      <div className="cart-summary">
        <p>Total: ${total}</p>
        <button onClick={clearCart}>Clear Cart</button>
      </div>
    </div>
  );
};
```
Key Learning Points:
- Conditional rendering
- Cart state management
- Event handling
- Price calculations

2. Core Concepts Explained
-------------------------

A. Context API
-------------
- Purpose: Global state management
- Components:
  1. Context (createContext)
  2. Provider (CartProvider)
  3. Consumer (useContext)
- Benefits:
  - Avoid prop drilling
  - Centralized state
  - Easy state updates

B. State Management
------------------
- useReducer vs useState:
  - useReducer for complex state
  - Multiple state updates
  - Predictable state changes
- State Structure:
  ```js
  {
    items: [], // Cart items
    total: 0,  // Total price
    amount: 0  // Total items
  }
  ```

C. Event Handling
----------------
1. Add to Cart:
   ```js
   const addToCart = (product) => {
     dispatch({ type: 'ADD_ITEM', payload: product });
   };
   ```
2. Remove from Cart:
   ```js
   const removeFromCart = (id) => {
     dispatch({ type: 'REMOVE_ITEM', payload: id });
   };
   ```

3. Implementation Steps
----------------------

1. Project Setup:
   ```bash
   npx create-react-app project-14
   cd project-14
   ```

2. Create Components:
   - Create component files
   - Implement basic structure
   - Add state management
   - Style components

3. Context Setup:
   - Create CartContext
   - Implement reducer
   - Add provider
   - Use context in components

4. Add Styling:
   - CSS Grid layout
   - Responsive design
   - Animations
   - Mobile-first approach

4. Best Practices
----------------

A. Code Organization
-------------------
1. File Structure:
   ```
   src/
     components/
     context/
     data/
   ```
2. Component Structure:
   - Single responsibility
   - Reusable components
   - Clear naming

B. State Management
------------------
1. Context Usage:
   - Keep context focused
   - Avoid unnecessary re-renders
   - Use proper state updates

2. Performance:
   - Memoize components
   - Optimize re-renders
   - Use proper hooks

C. Error Handling
----------------
1. Input Validation:
   - Check product data
   - Validate quantities
   - Handle edge cases

2. User Feedback:
   - Loading states
   - Error messages
   - Success notifications

5. Common Pitfalls
-----------------

1. State Updates:
   - ❌ Mutating state directly
   - ✅ Using immutable updates

2. Context Usage:
   - ❌ Over-using context
   - ✅ Keeping context focused

3. Performance:
   - ❌ Unnecessary re-renders
   - ✅ Proper memoization

6. Testing Tips
--------------

1. Component Testing:
   ```jsx
   test('adds item to cart', () => {
     render(<ProductList />);
     fireEvent.click(screen.getByText('Add to Cart'));
     expect(screen.getByText('1')).toBeInTheDocument();
   });
   ```

2. Context Testing:
   ```jsx
   test('updates cart total', () => {
     const { result } = renderHook(() => useContext(CartContext));
     act(() => {
       result.current.addToCart(mockProduct);
     });
     expect(result.current.total).toBe(10);
   });
   ```

7. Learning Resources
--------------------

1. React Documentation:
   - Context API
   - useReducer
   - Hooks

2. CSS Resources:
   - CSS Grid
   - Flexbox
   - Animations

3. State Management:
   - Redux
   - Context API
   - useReducer

8. Next Steps
------------

1. Advanced Features:
   - Product filtering
   - Search functionality
   - User authentication

2. Performance:
   - Code splitting
   - Lazy loading
   - Optimization

3. Testing:
   - Unit tests
   - Integration tests
   - E2E tests 